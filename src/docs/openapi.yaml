openapi: 3.0.0
info:
  title: Multi-tenant API
  version: 1.0.0
  description: API documentation for multi-tenant application

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.example.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        requestId:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
          format: uri
        status:
          type: string
          enum: [active, inactive, suspended]
        preferences:
          type: object
        createdAt:
          type: string
          format: date-time

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        status:
          type: string
          enum: [active, suspended, pending_deletion]
        features:
          type: object
        securityPolicy:
          type: object

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Invalid credentials

  /auth/2fa/setup:
    post:
      tags: [Authentication]
      summary: Setup 2FA
      security:
        - bearerAuth: []
      responses:
        200:
          description: 2FA setup info
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                  qrCode:
                    type: string
                  backupCodes:
                    type: array
                    items:
                      type: string

  /auth/2fa/verify:
    post:
      tags: [Authentication]
      summary: Verify 2FA setup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
      responses:
        200:
          description: 2FA verification successful

  /users:
    get:
      tags: [Users]
      summary: List users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer

    post:
      tags: [Users]
      summary: Create user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
                avatar:
                  type: string
                  format: uri
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags: [Users]
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
                preferences:
                  type: object
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /tenants:
    get:
      tags: [Tenants]
      summary: List tenants
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum: [active, suspended]
      responses:
        200:
          description: List of tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer

    post:
      tags: [Tenants]
      summary: Create tenant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                slug:
                  type: string
                features:
                  type: object
                securityPolicy:
                  type: object
      responses:
        201:
          description: Tenant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /tenants/{id}:
    get:
      tags: [Tenants]
      summary: Get tenant details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

    put:
      tags: [Tenants]
      summary: Update tenant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                features:
                  type: object
                securityPolicy:
                  type: object
      responses:
        200:
          description: Tenant updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /notifications:
    get:
      tags: [Notifications]
      summary: Get user notifications
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        message:
                          type: string
                        read:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time

  /health:
    get:
      tags: [System]
      summary: System health check
      responses:
        200:
          description: System health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, unhealthy]
                  services:
                    type: object
                    properties:
                      database:
                        type: object
                      redis:
                        type: object
                  metrics:
                    type: object

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Users
    description: User management
  - name: Tenants
    description: Tenant management
  - name: Notifications
    description: Notification management
  - name: System
    description: System endpoints
